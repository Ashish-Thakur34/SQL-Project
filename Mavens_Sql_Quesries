use maven;  --MAVENS SALES ANALYSIS USING MYSQL (Year 1997)

-- 1.Top 3 products having max revenue ?

Select products.product_name , sum(products.product_retail_price*transactions_1997.quantity) as Revenue
from products
join transactions_1997 on products.product_id = transactions_1997.product_id
group by products.product_name
order by Revenue desc
limit 3;

-- 2. what are the top 3 profitable products ?

select products.product_name, sum((products.product_retail_price - products.product_cost)* transactions_1997.quantity) as Profitable_product
from products
join transactions_1997 on products.product_id = transactions_1997.product_id
group by products.product_name
order by profitable_product desc
limit 3;

-- 3. Top 5 customer who has spend maximum amount?

select concat(customers.first_name,' ',customers.last_name) Full_name, sum(products.product_retail_price*transactions_1997.quantity) as Max_amount_spend
from customers 
join transactions_1997 on transactions_1997.customer_id =  customers.customer_id
join products on products.product_id =  transactions_1997.product_id
group by Full_name
order by max_amount_spend desc
limit 5;

-- 4. Top 3 stores with maximum profit?

select stores.store_type,stores.store_name, sum((products.product_retail_price - products.product_cost)*transactions_1997.quantity) as Max_profit
from stores 
join transactions_1997 on stores.store_id = transactions_1997.store_id 
join products on products.product_id = transactions_1997.product_id
group by stores.store_type,stores.store_name
order by max_profit desc
limit 3;

-- 5. customers who never purchased anything?

select concat(first_name,' ',last_name) full_name,transactions_1997.customer_id
from customers 
left join transactions_1997 on customers.customer_id = transactions_1997.customer_id 
where transactions_1997.customer_id is null;

select customers.customer_id, concat(first_name, " ", last_name) as full_name from customers
where customer_id NOT IN(select customer_id from transactions_1997);

-- 6. Customers who purchased whole year but not purchased from last 3 months of the year?

with all_customers1997 as (
select distinct c.customer_id, t7.transaction_date from customers c
join transactions_1997 t7 on t7.customer_id	= c.customer_id
where t7.transaction_date between '1997-01-01' and '1997-12-31'
),
last_purchased as (
select distinct c.customer_id, max(t7.transaction_date) max_date from customers c
left join transactions_1997 t7 on c.customer_id = t7.customer_id
group by c.customer_id
),
not_purchased_last3month as (
select distinct c.customer_id, concat(first_name,' ',last_name) Full_name from customers c
join transactions_1997 t7 on t7.customer_id = c.customer_id
where t7.transaction_date between '1997-01-01' and '1997-12-31'
and  t7.customer_id NOT IN (
        SELECT DISTINCT customer_id FROM transactions_1997
        WHERE transaction_date BETWEEN '1997-10-01' AND '1997-12-31')
)
select distinct c.customer_id, concat(first_name,' ',last_name) Full_name, l.max_date from last_purchased l
join not_purchased_last3month np on np.customer_id = l.customer_id
join customers c on c.customer_id = l.customer_id
order by l.max_date desc;

-- 7. Most returned products (more than 10)?

Select products.product_name, sum(returns.quantity) as most_return
from products 
join returns on products.product_id = returns.product_id
group by products.product_name
having sum(returns.quantity) > 10
order by most_return desc;

-- 8. sales by age group(18-30,31-50,>51) ?

select 
case
when 1997-year(birthdate) between 10 and 30 then "Young"
when 1997-year(birthdate) between 31 and 50 then "Adult"
when 1997-year(birthdate) > 50 then "Old" 
else 'unknown'
end 
As Age_group1,(sum(products.product_retail_price * transactions_1997.quantity)) as Sales
from customers
join transactions_1997 on transactions_1997.customer_id = customers.customer_id
join products on products.product_id = transactions_1997.product_id
group by Age_group1
order by sales desc;

-- 9.Top 5 Most popular products among age groups?

with Sales as (Select products.product_name, customers.age_group, 
sum(products.product_retail_price*transactions_1997.quantity) as total_sum,
row_number() over(partition by customers.age_group order by sum(products.product_retail_price*transactions_1997.quantity) desc) as row_num
from products 
join transactions_1997 on products.product_id = transactions_1997.product_id
join customers on customers.customer_id = transactions_1997.customer_id
group by products.product_name,customers.age_group order by total_sum desc)
select * from Sales where row_num <=5 
order by total_sum desc;


-- 10. Sales by Region-district by store type and products?
select region.sales_region, stores.store_type,products.product_name, sum(products.product_retail_price * transactions_1997.quantity) Sales from region
join stores on stores.region_id = region.region_id
join transactions_1997 on stores.store_id = transactions_1997.store_id
join products on transactions_1997.product_id = products.product_id
group by region.sales_region,products.product_name, stores.store_type,products.product_name
order by Sales desc;


-- 11. Top 10 highest salary person product perference?

select  concat(first_name,' ',last_name) as full_name,products.product_name, customers.member_card, max(customers.Average_Salary) as Max_salary
from customers
join transactions_1997 on transactions_1997.customer_id = customers.customer_id 
join products on products.product_id = transactions_1997.product_id
group by  products.product_name,Full_name, customers.member_card
order by max_salary desc
limit 10;

-- 12. Region wise store that  sold max quantity?
select region.region_id,region.sales_region,stores.store_type,(sum(transactions_1997.quantity)) qn from region
join stores on stores.region_id = region.region_id
join transactions_1997 on transactions_1997.store_id = stores.store_id
group by region.region_id, region.sales_region, stores.store_type
order by qn desc;
 
-- 13. Male and female with highest and lowest salary and there card preference?
 
with salary_card_prefer as (
select concat(first_name,' ',last_name) as full_name, Average_salary,
row_number() over (partition by gender order by Average_Salary desc) as prefer,
gender, member_card from customers
) 
select * from salary_card_prefer
where prefer <= 5;
